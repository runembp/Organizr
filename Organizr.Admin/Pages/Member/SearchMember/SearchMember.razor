@page "/search-member"

@using Blazorise.DataGrid.Configuration

@attribute [Authorize]

<SearchBar/>

<DataGrid
    TItem="Member"
    Data="_userList"
    Editable="true"
    RowSelectable="_ => false"
    Virtualize
    VirtualizeOptions="@(new VirtualizeOptions {DataGridHeight = "750px", DataGridMaxHeight = "750px"})">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(Member.Id)" Caption="Profil ID">
            <DisplayTemplate>
                <Button Clicked="() => OnEditUserLink_Clicked(context.Id)" Color="Color.Link">@context.Id</Button>
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Member.FirstName)" Caption="Fornavn"/>
        <DataGridColumn Field="@nameof(Member.LastName)" Caption="Efternavn"/>
        <DataGridColumn Field="@nameof(Member.Address)" Caption="Adresse"/>
        <DataGridColumn Field="@nameof(Member.Email)" Caption="Email"/>
        <DataGridColumn Field="@nameof(Member.Gender)" Caption="Køn"/>
        <DataGridColumn Field="@nameof(Member.PhoneNumber)" Caption="Telefon"/>
        <DataGridColumn Field="@nameof(Member.Id)" Caption="Administrer">
            <DisplayTemplate>
                <Button Size="Size.Small" Color="Color.Danger" Clicked="() => OnDeleteMemberButton_Clicked(context.Id)">Slet</Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<Snackbar @ref="_snackbarSuccess" Color="SnackbarColor.Success">
    <SnackbarBody TextWeight="TextWeight.Bold">
        @MemberToDelete.FirstName @MemberToDelete.LastName er blevet fjernet
    </SnackbarBody>
</Snackbar>

<RemoveMemberModal @ref="_removeMemberModal" MemberToDelete="MemberToDelete" OnMemberDeleted="@OnMemberDeleted"/>

@code {

    private List<Member> _userList = new();
    private Snackbar _snackbarSuccess = new();
    private RemoveMemberModal _removeMemberModal = new();

    private Member MemberToDelete { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _userList = await MemberService.GetAllMembers();
        var mandatoryOrganizationAdministator = _userList.First(x => x.Id == 1 && x.Email == ApplicationConstants.MandatoryOrganizationAdministratorEmail);
        _userList.Remove(mandatoryOrganizationAdministator);
        await base.OnInitializedAsync();
    }

    private void OnEditUserLink_Clicked(int userId)
    {
        NavigationManager.NavigateTo($"edit-member/{userId}");
    }

    private async Task OnDeleteMemberButton_Clicked(int memberId)
    {
        MemberToDelete = _userList.First(x => x.Id == memberId);
        await _removeMemberModal.Show();
    }

    private async Task OnMemberDeleted()
    {
        _userList.Remove(MemberToDelete);
        StateHasChanged();
        await _snackbarSuccess.Show();
    }

}