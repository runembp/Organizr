@page "/page-setup"

@attribute [Authorize]

<h3>Sideopsætning</h3>

<Tabs SelectedTab="@_selectedTab" 
      SelectedTabChanged="@OnSelectedTabChanged" 
      RenderMode="TabsRenderMode.LazyReload">
    <Items>
        <Tab Name="Unselected">#</Tab>
        <Tab Name="Frontpage">Forside</Tab>
        <Tab Name="CreateMembership">Opret Medlemskab</Tab>
        <Tab Name="AboutUs">Om os</Tab>
        <Tab Name="Contact">Kontakt</Tab>
    </Items>
    <Content>
        <TabPanel Name="Unselected" Padding="Padding.Is3">
            <Paragraph>Vælg en side at redigere.</Paragraph>
            <Help>Siderne bliver gemt i et WYSIWYG (What You See Is What You Get) format, som bliver vist på samme måde på Medlemssiden, som det gemmes her.</Help>
        </TabPanel>
        <TabPanel Name="Frontpage">
            <PageEdit Configuration="ConfigFrontpage"/>
        </TabPanel>
        <TabPanel Name="CreateMembership">
            <PageEdit Configuration="ConfigCreateMembership"/>
        </TabPanel>
        <TabPanel Name="AboutUs">
            <PageEdit Configuration="ConfigAboutUs"/>
        </TabPanel>
        <TabPanel Name="Contact">
            <PageEdit Configuration="ConfigContact"/>
        </TabPanel>
    </Content>
</Tabs>

@if (!_selectedTab.Equals("Unselected"))
{
    <Button Color="Color.Primary" Clicked="OnSaveButton_Clicked">Gem</Button>    
}

<Alert Visible="@(_configurationsUpdatedSuccess && !_selectedTab.Equals("Unselected"))">
    <AlertMessage TextColor="TextColor.Success">Sideopsætningen er gemt</AlertMessage>
</Alert>

@code{
    private Configuration ConfigFrontpage { get; set; } = new();
    private Configuration ConfigCreateMembership { get; set; } = new();
    private Configuration ConfigAboutUs { get; set; } = new();
    private Configuration ConfigContact { get; set; } = new();

    private bool _configurationsUpdatedSuccess;

    string _selectedTab = "Unselected";

    protected override async Task OnInitializedAsync()
    {
        var pageSetupConfigurations = await ConfigurationService.GetAllConfigurationsOfType(ConfigType.PageSetup);
        
        ConfigFrontpage = pageSetupConfigurations.First(x => x.Id == ConfigurationIds.FrontpageTopTextBox);
        ConfigCreateMembership = pageSetupConfigurations.First(x => x.Id == ConfigurationIds.CreateMembershipTopText);
        ConfigAboutUs = pageSetupConfigurations.First(x => x.Id == ConfigurationIds.AboutUsPage);
        ConfigContact = pageSetupConfigurations.First(x => x.Id == ConfigurationIds.ContactPageTopTextBox);
    }

    private Task OnSelectedTabChanged(string name)
    {
        _selectedTab = name;

        return Task.CompletedTask;
    }

    private async Task OnSaveButton_Clicked()
    {
        _configurationsUpdatedSuccess = false;

        var updatedConfigurations = new List<Configuration> 
        {
            ConfigFrontpage,
            ConfigCreateMembership,
            ConfigAboutUs,
            ConfigContact
        };

        await ConfigurationService.UpdateConfigurationsOfType(ConfigType.PageSetup, updatedConfigurations);

        // if (response.Succeeded)
        // {
            // _configurationsUpdatedSuccess = true;
        // }
    }
}