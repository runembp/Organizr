@page "/Configurations"
@using Organizr.Application.Requests.Configurations
@using Organizr.Domain.Entities
@using Organizr.Application.Commands
@using Organizr.Application.Commands.Configurations
@using Organizr.Domain.ApplicationConstants
@using Organizr.Domain.Enums

@attribute [Authorize]

<h3>Konfigurationer</h3>

<CardDeck Padding="Padding.Is3">
    <Card ColumnSize="ColumnSize.Is6">
        <CardBody>
            <CardTitle Size="5">Nyhedskonfigurationer</CardTitle>
            <Field>
                <FieldLabel>Aktiver kommentarer på Nyheder</FieldLabel>
                <Check TValue="bool" @bind-Checked="@ConfigActivateCommentsOnNews">Aktiv</Check>
            </Field>
            <Field>
                <FieldLabel>Aktiver mulighed for at skrive kommentarer til Nyheder for Administratorer</FieldLabel>
                <Check TValue="bool" @bind-Checked="@ConfigActivatedAdministratorCommentOnNews">Aktiv</Check>
            </Field>
            <Field>
                <FieldLabel>Aktiver mulighed for at skrive kommentarer til Nyheder for Medlemmer</FieldLabel>
                <Check TValue="bool" @bind-Checked="ConfigActivateBasicMemberCommentOnNews">Aktiv</Check>
            </Field>
        </CardBody>
    </Card>

    <Card ColumnSize="ColumnSize.Is6">
        <CardBody>
            <CardTitle Size="5">Opret nyheder</CardTitle>
            <Field>
                <FieldLabel>Giv alle medlemmer mulighed for at oprette nyheder?</FieldLabel>
                <Check TValue="bool" @bind-Checked="@ConfigActivateAbilityForAllMembersToCreateNews">Aktiv</Check>
            </Field>
        </CardBody>
    </Card>
</CardDeck>

<CardDeck Padding="Padding.Is3">
    <Card ColumnSize="ColumnSize.Is6">
        <CardBody>
            <CardTitle Size="5">Medlemsskab</CardTitle>
            <Field>
                <FieldLabel>Vælg hvilken gruppe der skal tilmeldes ved oprettelse af Medlemsskab</FieldLabel>
                <Select TValue="int" Width="Width.Is50" @bind-SelectedValue="@ConfigPredeterminedGroupNewMembersAssignedTo">
                    @foreach (var group in ConfigurationList)
                    {
                        <SelectItem Value="@group.Id">Gruppe @group.Id</SelectItem>
                    }
                </Select>
            </Field>
        </CardBody>
    </Card>

    <Card ColumnSize="ColumnSize.Is6">
        <CardBody>
            <CardTitle Size="5">Organisations data</CardTitle>
            <Field>
                <FieldLabel>Organisations adresse</FieldLabel>
                <TextEdit @bind-Text="ConfigOrganizationAddress"/>
            </Field>

        </CardBody>
    </Card>
</CardDeck>

<Button Color="Color.Primary" Clicked="OnSaveButton_Clicked">Gem</Button>

<Column ColumnSize="ColumnSize.Is3">
    <Alert @bind-Visible="ConfigurationsHasBeenSaved" Color="Color.Success" TextAlignment="TextAlignment.Center">
        <AlertMessage>Konfigurationer er gemt</AlertMessage>
    </Alert>
</Column>

@code {
    private List<Configuration> ConfigurationList { get; set; } = new();

    private string ConfigOrganizationAddress { get; set; } = string.Empty;
    private string ConfigOrganizationPhoneNumber { get; set; } = string.Empty;
    private string ConfigOrganizationEmail { get; set; } = string.Empty;
    private int ConfigPredeterminedGroupNewMembersAssignedTo { get; set; }
    private bool ConfigActivateCommentsOnNews { get; set; }
    private bool ConfigActivatedAdministratorCommentOnNews { get; set; }
    private bool ConfigActivateBasicMemberCommentOnNews { get; set; }
    private bool ConfigActivateAbilityForAllMembersToCreateNews { get; set; }

    private bool ConfigurationsHasBeenSaved { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await Mediator.Send(new GetAllConfigurationsOfTypeRequest{ConfigType =ConfigType.Configuration});

        ConfigurationList = response.Configurations;

        await SetConfigurationValues();
    }

    private Task SetConfigurationValues()
    {
        ConfigOrganizationAddress = ConfigurationList.First(config => config.Id == ConfigurationIds.OrganizationAddress).StringValue!;
        ConfigOrganizationPhoneNumber = ConfigurationList.First(config => config.Id == ConfigurationIds.OrganizationPhoneNumber).StringValue!;
        ConfigOrganizationEmail = ConfigurationList.First(config => config.Id == ConfigurationIds.OrganizationEmailAddress).StringValue!;
        ConfigPredeterminedGroupNewMembersAssignedTo = (int) ConfigurationList.First(config => config.Id == ConfigurationIds.PredeterminedGroupToAssignNewMembersTo).IdValue!;
        ConfigActivateCommentsOnNews = (bool) ConfigurationList.First(config => config.Id == ConfigurationIds.ActivateCommentsOnNews).BoolValue!;
        ConfigActivatedAdministratorCommentOnNews = (bool) ConfigurationList.First(config => config.Id == ConfigurationIds.ActivateAdministratorMemberAbilityToCommentOnNews).BoolValue!;
        ConfigActivateBasicMemberCommentOnNews = (bool) ConfigurationList.First(config => config.Id == ConfigurationIds.ActivateBasicMemberAbilityToCommentOnNews).BoolValue!;
        ConfigActivateAbilityForAllMembersToCreateNews = (bool) ConfigurationList.First(config => config.Id == ConfigurationIds.ActivateAbilityForAllMembersToCreateNews).BoolValue!;
        return Task.CompletedTask;
    }

    private async Task OnSaveButton_Clicked()
    {
        ConfigurationsHasBeenSaved = false;

        var request = new UpdateConfigurationsOfTypeConfigCommand
        {
            OrganizationAddress = ConfigOrganizationAddress,
            OrganizationEmailAddress = ConfigOrganizationEmail,
            OrganizationPhoneNumber = ConfigOrganizationPhoneNumber,
            ActivateCommentsOnNews = ConfigActivateCommentsOnNews,
            PredeterminedGroupToAssignNewMembersTo = ConfigPredeterminedGroupNewMembersAssignedTo,
            ActivateAbilityForAllMembersToCreateNews = ConfigActivateAbilityForAllMembersToCreateNews,
            ActivateAdministratorMemberAbilityToCommentOnNews = ConfigActivatedAdministratorCommentOnNews,
            ActivateBasicMemberAbilityToCommentOnNews = ConfigActivateBasicMemberCommentOnNews
        };

        var response = await Mediator.Send(request);

        ConfigurationsHasBeenSaved = response.Succeeded;
    }

}